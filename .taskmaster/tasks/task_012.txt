# Task ID: 12
# Title: Authentication System Implementation
# Status: pending
# Dependencies: 11
# Priority: high
# Description: Implement user authentication with Firebase Authentication including login, signup, and profile management
# Details:
1. Create AuthContext for managing authentication state:
```typescript
interface AuthContextType {
  currentUser: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<UserCredential>;
  googleLogin: () => Promise<UserCredential>;
  signup: (email: string, password: string) => Promise<UserCredential>;
  logout: () => Promise<void>;
}
```
2. Implement auth service functions in auth.ts:
```typescript
import { auth, db } from '../utils/firebase';
import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, GoogleAuthProvider, signInWithPopup, User } from 'firebase/auth';
import { doc, setDoc, serverTimestamp } from 'firebase/firestore';

export const signupWithEmail = async (email: string, password: string) => {
  const userCredential = await createUserWithEmailAndPassword(auth, email, password);
  await createUserProfile(userCredential.user);
  return userCredential;
};

export const loginWithEmail = (email: string, password: string) => {
  return signInWithEmailAndPassword(auth, email, password);
};

export const loginWithGoogle = async () => {
  const provider = new GoogleAuthProvider();
  const userCredential = await signInWithPopup(auth, provider);
  await createUserProfile(userCredential.user);
  return userCredential;
};

export const logoutUser = () => signOut(auth);

const createUserProfile = async (user: User) => {
  const userRef = doc(db, 'users', user.uid);
  await setDoc(userRef, {
    uid: user.uid,
    email: user.email,
    displayName: user.displayName || user.email?.split('@')[0],
    photoURL: user.photoURL,
    createdAt: serverTimestamp()
  }, { merge: true });
};
```
3. Create LoginForm and SignupForm components
4. Implement protected routes for authenticated users
5. Add persistence for user login state
6. Create Header component with user profile display and logout button

# Test Strategy:
1. Test user registration with email/password
2. Test login with email/password
3. Test Google authentication flow
4. Verify user profile is created in Firestore after signup
5. Test logout functionality
6. Verify protected routes redirect unauthenticated users
7. Test error handling for invalid credentials
8. Verify login persistence across page refreshes
